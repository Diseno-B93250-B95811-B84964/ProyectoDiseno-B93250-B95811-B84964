/*
 * Issue #27 - View Manager.
 * Jimena Gdur Vargas - B93250.
 * √Ålvaro Miranda Villegas - B84964.
 * Ronald Palma Villegas - B95811.
 */
package view;

import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;

/**
 * Displays main game components like, the board and player's inventories.
 * Made for the Royal Game of Ur.
 * @author Ximena Gdur, Mauricio Palma
 */
public class UrMainGame extends javax.swing.JPanel implements MainGameInterface{
    /**
     * Amount of rows in board.
     */
    private final static int ROWS = 8; // TODO: READ THIS FROM CONTROLLER
    /**
     * Amount of columns in board.
     */
    private final static int COLUMNS = 3;
    /**
     * JLabel array representing game tiles.
     */
    private final JLabel tilesArray[][] = new JLabel[ROWS][COLUMNS];
    /**
     * An array of labels for the dice images.
     */
    private JLabel diceLabelArray [];
    /**
     * Image Icon representing dice state where player has no score.
     */
    private ImageIcon noScoreDiceState;
    /**
     * Image Icon representing dice state where player has scored.
     */
    private ImageIcon scoreDiceState;
    /**
     * Amount of used pieces for first player.
     */
    private int usedPiecesFirstPlayer;
    /**
     * Amount of used pieces for second player.
     */
    private int usedPiecesSecondPlayer;
    /**
     * First player's color.
     */
    private Color firstPlayerColor;
    /**
     * Second player's color.
     */
    private Color secondPlayerColor;
    /**
     * Game's version of color blue.
     */
    private final static Color BLUE = new Color (0,102,255);
    /**
     * Game's version of color brown.
     */
    private final static Color BROWN = new Color (102,51,0);
    /**
     * Game's version of color green.
     */
    private final static Color GREEN = new Color (102,204,0);
    /**
     * Game's version of color purple.
     */
    private final static Color PURPLE = new Color (102,0,102);
    /**
     * Game's version of color red.
     */
    private final static Color RED = new Color (255,0,0);
    /**
     * Game's version of color yellow.
     */
    private final static Color YELLOW = new Color (255,204,0);

    /**
     * Constructs a new main game for the Royal Game of Ur.
     */
    public UrMainGame() {
        initComponents();
        initializeTilesArray();
        makeUrBoard();
        makeDices();
        this.usedPiecesFirstPlayer = 1;
        this.usedPiecesSecondPlayer = 1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        saveAndLeaveButton = new javax.swing.JButton();
        playerTurnLabel = new javax.swing.JLabel();
        Player1Panel = new javax.swing.JPanel();
        firstPlayerTitleLabel = new javax.swing.JLabel();
        firstPlayerLabelName = new java.awt.Label();
        firstPlayerScore = new javax.swing.JLabel();
        PlayerScoreTitle = new javax.swing.JLabel();
        inventoryTitle1 = new javax.swing.JLabel();
        pieceLabelFirstPlayer1 = new javax.swing.JLabel();
        pieceLabelFirstPlayer2 = new javax.swing.JLabel();
        pieceLabelFirstPlayer3 = new javax.swing.JLabel();
        pieceLabelFirstPlayer4 = new javax.swing.JLabel();
        pieceLabelFirstPlayer5 = new javax.swing.JLabel();
        pieceLabelFirstPlayer6 = new javax.swing.JLabel();
        pieceLabelFirstPlayer7 = new javax.swing.JLabel();
        Player2Panel = new javax.swing.JPanel();
        secondPlayerTitleLabel = new javax.swing.JLabel();
        secondPlayerLabelName = new java.awt.Label();
        secondPlayerScore = new javax.swing.JLabel();
        PlayerScoreTitle2 = new javax.swing.JLabel();
        inventoryTitle2 = new javax.swing.JLabel();
        pieceLabelSecondPlayer1 = new javax.swing.JLabel();
        pieceLabelSecondPlayer2 = new javax.swing.JLabel();
        pieceLabelSecondPlayer3 = new javax.swing.JLabel();
        pieceLabelSecondPlayer4 = new javax.swing.JLabel();
        pieceLabelSecondPlayer5 = new javax.swing.JLabel();
        pieceLabelSecondPlayer6 = new javax.swing.JLabel();
        pieceLabelSecondPlayer7 = new javax.swing.JLabel();
        boardGamePanel = new javax.swing.JPanel();
        dicePanel = new javax.swing.JPanel();
        dice4 = new javax.swing.JLabel();
        dice3 = new javax.swing.JLabel();
        dice2 = new javax.swing.JLabel();
        dice1 = new javax.swing.JLabel();
        moves = new javax.swing.JLabel();
        throwDiceButton = new javax.swing.JButton();
        rulesButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        saveAndLeaveButton.setBackground(new java.awt.Color(44, 37, 37));
        saveAndLeaveButton.setFont(new java.awt.Font("Century Schoolbook", 1, 24)); // NOI18N
        saveAndLeaveButton.setForeground(new java.awt.Color(255, 255, 255));
        saveAndLeaveButton.setText("SAVE AND EXIT");
        saveAndLeaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAndLeaveButtonActionPerformed(evt);
            }
        });

        playerTurnLabel.setFont(new java.awt.Font("Century Schoolbook", 1, 24)); // NOI18N
        playerTurnLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        playerTurnLabel.setText("Player 1's turn");

        Player1Panel.setBackground(new java.awt.Color(255, 255, 255));
        Player1Panel.setPreferredSize(new java.awt.Dimension(350, 700));

        firstPlayerTitleLabel.setFont(new java.awt.Font("Century Schoolbook", 1, 24)); // NOI18N
        firstPlayerTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        firstPlayerTitleLabel.setText("Player 1");

        firstPlayerLabelName.setAlignment(1);
        firstPlayerLabelName.setFont(new java.awt.Font("Century Schoolbook", 0, 18)); // NOI18N
        firstPlayerLabelName.setText("label1");

        firstPlayerScore.setFont(new java.awt.Font("Century Schoolbook", 0, 24)); // NOI18N
        firstPlayerScore.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        firstPlayerScore.setText("0");

        PlayerScoreTitle.setFont(new java.awt.Font("Century Schoolbook", 1, 24)); // NOI18N
        PlayerScoreTitle.setText("Score");

        inventoryTitle1.setFont(new java.awt.Font("Century Schoolbook", 0, 18)); // NOI18N
        inventoryTitle1.setText("Pieces Left");

        pieceLabelFirstPlayer1.setText("jLabel1");

        pieceLabelFirstPlayer2.setText("jLabel1");

        pieceLabelFirstPlayer3.setText("jLabel1");

        pieceLabelFirstPlayer4.setText("jLabel1");

        pieceLabelFirstPlayer5.setText("jLabel1");

        pieceLabelFirstPlayer6.setText("jLabel1");

        pieceLabelFirstPlayer7.setText("jLabel1");

        javax.swing.GroupLayout Player1PanelLayout = new javax.swing.GroupLayout(Player1Panel);
        Player1Panel.setLayout(Player1PanelLayout);
        Player1PanelLayout.setHorizontalGroup(
            Player1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Player1PanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(Player1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(Player1PanelLayout.createSequentialGroup()
                        .addComponent(pieceLabelFirstPlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(176, 176, 176))
                    .addGroup(Player1PanelLayout.createSequentialGroup()
                        .addGroup(Player1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(Player1PanelLayout.createSequentialGroup()
                                .addComponent(pieceLabelFirstPlayer3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(pieceLabelFirstPlayer4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(pieceLabelFirstPlayer2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(Player1PanelLayout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addComponent(inventoryTitle1)))
                        .addGap(18, 18, 18)
                        .addGroup(Player1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pieceLabelFirstPlayer6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pieceLabelFirstPlayer5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pieceLabelFirstPlayer7, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(36, 36, 36))
            .addGroup(Player1PanelLayout.createSequentialGroup()
                .addGroup(Player1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Player1PanelLayout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(PlayerScoreTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(firstPlayerScore, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Player1PanelLayout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addGroup(Player1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(firstPlayerLabelName, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(firstPlayerTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        Player1PanelLayout.setVerticalGroup(
            Player1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Player1PanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(firstPlayerTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(firstPlayerLabelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(inventoryTitle1)
                .addGap(39, 39, 39)
                .addGroup(Player1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pieceLabelFirstPlayer4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pieceLabelFirstPlayer5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pieceLabelFirstPlayer3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Player1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pieceLabelFirstPlayer2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pieceLabelFirstPlayer6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Player1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pieceLabelFirstPlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pieceLabelFirstPlayer7, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(Player1PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PlayerScoreTitle)
                    .addComponent(firstPlayerScore))
                .addGap(32, 32, 32))
        );

        Player2Panel.setBackground(new java.awt.Color(255, 255, 255));
        Player2Panel.setPreferredSize(new java.awt.Dimension(350, 700));

        secondPlayerTitleLabel.setFont(new java.awt.Font("Century Schoolbook", 1, 24)); // NOI18N
        secondPlayerTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        secondPlayerTitleLabel.setText("Player 2");

        secondPlayerLabelName.setAlignment(1);
        secondPlayerLabelName.setFont(new java.awt.Font("Century Schoolbook", 0, 18)); // NOI18N
        secondPlayerLabelName.setText("label1");

        secondPlayerScore.setFont(new java.awt.Font("Century Schoolbook", 0, 24)); // NOI18N
        secondPlayerScore.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        secondPlayerScore.setText("0");

        PlayerScoreTitle2.setFont(new java.awt.Font("Century Schoolbook", 1, 24)); // NOI18N
        PlayerScoreTitle2.setText("Score");

        inventoryTitle2.setFont(new java.awt.Font("Century Schoolbook", 0, 18)); // NOI18N
        inventoryTitle2.setText("Pieces Left");

        pieceLabelSecondPlayer1.setText("jLabel1");

        pieceLabelSecondPlayer2.setText("jLabel1");

        pieceLabelSecondPlayer3.setText("jLabel1");

        pieceLabelSecondPlayer4.setText("jLabel1");

        pieceLabelSecondPlayer5.setText("jLabel1");

        pieceLabelSecondPlayer6.setText("jLabel1");

        pieceLabelSecondPlayer7.setText("jLabel1");

        javax.swing.GroupLayout Player2PanelLayout = new javax.swing.GroupLayout(Player2Panel);
        Player2Panel.setLayout(Player2PanelLayout);
        Player2PanelLayout.setHorizontalGroup(
            Player2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Player2PanelLayout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addGroup(Player2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(secondPlayerTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(secondPlayerLabelName, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(Player2PanelLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(Player2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Player2PanelLayout.createSequentialGroup()
                        .addGroup(Player2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(inventoryTitle2)
                            .addGroup(Player2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(Player2PanelLayout.createSequentialGroup()
                                    .addComponent(pieceLabelSecondPlayer3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(pieceLabelSecondPlayer4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(pieceLabelSecondPlayer2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(pieceLabelSecondPlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(Player2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pieceLabelSecondPlayer6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pieceLabelSecondPlayer5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pieceLabelSecondPlayer7, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(Player2PanelLayout.createSequentialGroup()
                        .addComponent(PlayerScoreTitle2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(secondPlayerScore, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        Player2PanelLayout.setVerticalGroup(
            Player2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Player2PanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(secondPlayerTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(secondPlayerLabelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(inventoryTitle2)
                .addGap(27, 27, 27)
                .addGroup(Player2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pieceLabelSecondPlayer3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pieceLabelSecondPlayer4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pieceLabelSecondPlayer5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(Player2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pieceLabelSecondPlayer2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pieceLabelSecondPlayer6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Player2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pieceLabelSecondPlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pieceLabelSecondPlayer7, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(Player2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PlayerScoreTitle2)
                    .addComponent(secondPlayerScore))
                .addGap(37, 37, 37))
        );

        javax.swing.GroupLayout boardGamePanelLayout = new javax.swing.GroupLayout(boardGamePanel);
        boardGamePanel.setLayout(boardGamePanelLayout);
        boardGamePanelLayout.setHorizontalGroup(
            boardGamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 358, Short.MAX_VALUE)
        );
        boardGamePanelLayout.setVerticalGroup(
            boardGamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 715, Short.MAX_VALUE)
        );

        dice4.setText("dice4");

        dice3.setText("dice3");

        dice2.setText("dice2");

        dice1.setText("dice1");

        moves.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        moves.setText("Number of moves");

        throwDiceButton.setBackground(new java.awt.Color(44, 37, 37));
        throwDiceButton.setFont(new java.awt.Font("Century Schoolbook", 1, 14)); // NOI18N
        throwDiceButton.setForeground(new java.awt.Color(255, 255, 255));
        throwDiceButton.setText("THROW DICE");
        throwDiceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                throwDiceButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dicePanelLayout = new javax.swing.GroupLayout(dicePanel);
        dicePanel.setLayout(dicePanelLayout);
        dicePanelLayout.setHorizontalGroup(
            dicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dicePanelLayout.createSequentialGroup()
                        .addComponent(dice1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dice2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(throwDiceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dicePanelLayout.createSequentialGroup()
                        .addComponent(dice3, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dice4, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dicePanelLayout.createSequentialGroup()
                        .addComponent(moves)
                        .addGap(28, 28, 28)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        dicePanelLayout.setVerticalGroup(
            dicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dice1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dice2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dice3, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dice4, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dicePanelLayout.createSequentialGroup()
                        .addComponent(moves)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(throwDiceButton, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                .addContainerGap())
        );

        rulesButton.setBackground(new java.awt.Color(44, 37, 37));
        rulesButton.setFont(new java.awt.Font("Century Schoolbook", 1, 24)); // NOI18N
        rulesButton.setForeground(new java.awt.Color(255, 255, 255));
        rulesButton.setText("GAME RULES");
        rulesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rulesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dicePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Player1Panel, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(boardGamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(saveAndLeaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(rulesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(Player2Panel, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addComponent(playerTurnLabel)))
                .addGap(0, 36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(playerTurnLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(boardGamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Player2Panel, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rulesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(saveAndLeaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48))))
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(Player1Panel, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(dicePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void saveAndLeaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAndLeaveButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveAndLeaveButtonActionPerformed

    private void rulesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rulesButtonActionPerformed

    }//GEN-LAST:event_rulesButtonActionPerformed

    private void throwDiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_throwDiceButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_throwDiceButtonActionPerformed

    /**
     * Returns button that will display game rules.
     * Made for Royal Game of Ur.
     * @return ShowRules button.
     */
    @Override
    public JButton getShowRulesButton(){
        return this.rulesButton;
    }
    /**
     * Returns button that updates dice with new random value.
     * Made for Royal Game of Ur.
     * @return ThrowDice button.
     */
    @Override
    public JButton getThrowDiceButton(){
        return this.throwDiceButton;
    }
    /**
     * Returns button that will save game and exit.
     * Made for Royal Game of Ur.
     * @return ExitAndSave button.
     */
    @Override
    public JButton getExitAndSaveButton(){
        return this.saveAndLeaveButton;
    } 
    /**
     * Returns matrix that stores all labels, representing game tiles.
     * Made for Royal Game of Ur.
     * @return JLabel matrix.
     */
    @Override
    public JLabel[][] getTilesMatrix(){
        return tilesArray;
    }
    /**
     * Displays piece for player with given color.
     * Made for Royal Game of Ur.
     * @param color Player's color.
     */
    @Override
    public void activeAPieceForPlayer(Color color) {
        if (color == firstPlayerColor) {
            activeAPieceForFirstPlayer();
        } else if (color == secondPlayerColor) {
            activeAPieceForSecondPlayer();
        }
    }
    /**
     * Displays piece for first player.
     */
    private void activeAPieceForFirstPlayer(){
        usedPiecesFirstPlayer--;
        switch (usedPiecesFirstPlayer) {
            case 1 -> {
                pieceLabelFirstPlayer1.setEnabled(true);
                pieceLabelFirstPlayer1.setVisible(true);
                break;
            }
            case 2 -> {
                pieceLabelFirstPlayer2.setEnabled(true);
                pieceLabelFirstPlayer2.setVisible(true);
                break;
            }
            case 3 -> {
                pieceLabelFirstPlayer3.setEnabled(true);
                pieceLabelFirstPlayer3.setVisible(true);
                break;
            }
            case 4 -> {
                pieceLabelFirstPlayer4.setEnabled(true);
                pieceLabelFirstPlayer4.setVisible(true);
                break;
            }
            case 5 -> {
                pieceLabelFirstPlayer5.setEnabled(true);
                pieceLabelFirstPlayer5.setVisible(true);
                break;
            }
            case 6 -> {
                pieceLabelFirstPlayer6.setEnabled(true);
                pieceLabelFirstPlayer6.setVisible(true);
                break;
            }
            case 7 -> {
                pieceLabelFirstPlayer7.setEnabled(true);
                pieceLabelFirstPlayer7.setVisible(true);
                break;
            }
            default -> {
            }
        }
    } 
    /**
     * Displays piece for second player.
     */
    private void activeAPieceForSecondPlayer(){
        usedPiecesSecondPlayer--;
        switch (usedPiecesSecondPlayer) {
            case 1 -> {
                pieceLabelSecondPlayer1.setEnabled(true);
                pieceLabelSecondPlayer1.setVisible(true);
                break;
            }
            case 2 -> {
                pieceLabelSecondPlayer2.setEnabled(true);
                pieceLabelSecondPlayer2.setVisible(true);
                break;
            }
            case 3 -> {
                pieceLabelSecondPlayer3.setEnabled(true);
                pieceLabelSecondPlayer3.setVisible(true);
                break;
            }
            case 4 -> {
                pieceLabelSecondPlayer4.setEnabled(true);
                pieceLabelSecondPlayer4.setVisible(true);
                break;
            }
            case 5 -> {
                pieceLabelSecondPlayer5.setEnabled(true);
                pieceLabelSecondPlayer5.setVisible(true);
                break;
            }
            case 6 -> {
                pieceLabelSecondPlayer6.setEnabled(true);
                pieceLabelSecondPlayer6.setVisible(true);
                break;
            }
            case 7 -> {
                pieceLabelSecondPlayer7.setEnabled(true);
                pieceLabelSecondPlayer7.setVisible(true);
                break;
            }
            default -> {
            }
        }      
    }
    /**
     * Makes player's piece invisible.
     * Made for Royal Game of Ur.
     * @param color Player's color.
     */
    @Override
    public void desactiveAPieceForPlayer(Color color) {
        if (color == firstPlayerColor) {
            desactiveAPieceForFirstPlayer();
        } else if (color == secondPlayerColor) {
            desactiveAPieceForSecondPlayer();
        }
    }
    /**
     * Makes first player's piece invisible.
     */
    private void desactiveAPieceForFirstPlayer(){
        switch (usedPiecesFirstPlayer) {
            case 1 -> {
                pieceLabelFirstPlayer1.setEnabled(false);
                pieceLabelFirstPlayer1.setVisible(false);
                break;
            }
            case 2 -> {
                pieceLabelFirstPlayer2.setEnabled(false);
                pieceLabelFirstPlayer2.setVisible(false);
                break;
            }
            case 3 -> {
                pieceLabelFirstPlayer3.setEnabled(false);
                pieceLabelFirstPlayer3.setVisible(false);
                break;
            }
            case 4 -> {
                pieceLabelFirstPlayer4.setEnabled(false);
                pieceLabelFirstPlayer4.setVisible(false);
                break;
            }
            case 5 -> {
                pieceLabelFirstPlayer5.setEnabled(false);
                pieceLabelFirstPlayer5.setVisible(false);
                break;
            }
            case 6 -> {
                pieceLabelFirstPlayer6.setEnabled(false);
                pieceLabelFirstPlayer6.setVisible(false);
                break;
            }
            case 7 -> {
                pieceLabelFirstPlayer7.setEnabled(false);
                pieceLabelFirstPlayer7.setVisible(false);
                break;
            }
            default -> {
            }
        }
        usedPiecesFirstPlayer++;
    }
    /**
     * Makes second player's piece invisible.
     */
    private void desactiveAPieceForSecondPlayer(){
        switch (usedPiecesSecondPlayer) {
            case 1 -> {
                pieceLabelSecondPlayer1.setEnabled(false);
                pieceLabelSecondPlayer1.setVisible(false);
                break;
            }
            case 2 -> {
                pieceLabelSecondPlayer2.setEnabled(false);
                pieceLabelSecondPlayer2.setVisible(false);
                break;
            }
            case 3 -> {
                pieceLabelSecondPlayer3.setEnabled(false);
                pieceLabelSecondPlayer3.setVisible(false);
                break;
            }
            case 4 -> {
                pieceLabelSecondPlayer4.setEnabled(false);
                pieceLabelSecondPlayer4.setVisible(false);
                break;
            }
            case 5 -> {
                pieceLabelSecondPlayer5.setEnabled(false);
                pieceLabelSecondPlayer5.setVisible(false);
                break;
            }
            case 6 -> {
                pieceLabelSecondPlayer6.setEnabled(false);
                pieceLabelSecondPlayer6.setVisible(false);
                break;
            }
            case 7 -> {
                pieceLabelSecondPlayer7.setEnabled(false);
                pieceLabelSecondPlayer7.setVisible(false);
                break;
            }
            default -> {
            }
        }
        usedPiecesSecondPlayer++;
    }
    /**
     * Gets a buffered image using image's name.
     * Made for JAR file use.
     * @param imageName Name of the specific image to load.
     * @return BufferedImage loaded from name.
     */
    private BufferedImage loadImagesForJarFile(String imageName) {
        BufferedImage image = null; 
        String generalPath = "/images/";
        String extensionName = ".png";
        String finalPath = generalPath+imageName+extensionName;
        try {  
            image = ImageIO.read(getClass().getResourceAsStream(finalPath));
        } catch (IOException ex) {
            Logger.getLogger(UrMainGame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return image;
    }
    /**
     * Gets a buffered image using image's name.
     * Made for IDE use.
     * @param imageName Name of the specific image to load.
     * @return BufferedImage loaded from name.
     */
    private BufferedImage loadImagesForIDEFile(String imageName) {
        BufferedImage image = null; 
        String generalPath = "images/";
        String extensionName = ".png";
        String finalPath = generalPath+imageName+extensionName;
        try {   
            image = ImageIO.read(new FileInputStream(finalPath));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(UrMainGame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(UrMainGame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return image;
    }
    /**
     * Creates board for the Royal Game of Ur.
     */
    private void makeUrBoard() {
        tilesArray[4][0].setBackground(Color.decode("#E0E0E0"));
        tilesArray[5][0].show(false);
        tilesArray[4][2].setBackground(Color.decode("#E0E0E0"));
        tilesArray[5][2].show(false);
        setRosesToBoard();
    }
    /**
     * Gets the ImageIcon of Rose tile icon.
     * @return the ImageIcon.
     */
    private ImageIcon getImageIconRose() {
        /*For JAR FILE*/
        //BufferedImage image = loadImagesForJarFile("icon2_rounded"); 
        
        /*For NetBeans*/
        BufferedImage image = loadImagesForIDEFile("icon2_rounded");
        
        ImageIcon roseIcon = resizeImage(image, 80,80);
        return roseIcon;
    }
    /**
     * Sets tiles that have roses in them.
     */
    private void setRosesToBoard() {
        ImageIcon roseIcon = getImageIconRose();
        tilesArray[0][0].setIcon(roseIcon);
        tilesArray[0][2].setIcon(roseIcon);
        tilesArray[3][1].setIcon(roseIcon);
        tilesArray[6][0].setIcon(roseIcon);
        tilesArray[6][2].setIcon(roseIcon);
    }
    /**
     * Creates labels for board representation and sets them on screen.
     */
    private void initializeTilesArray(){
        int intialXGap = 39;
        int intialYGap = 18;
        int horizontalGapTuning = 89;
        int verticalGapTuning = horizontalGapTuning - 50;
        int verticaOffset = horizontalGapTuning - 2;
        for (int row = 0; row < ROWS; row++) {
            for (int column = 0; column < COLUMNS; column++) 
            {
                tilesArray[row][column] = new JLabel();
                tilesArray[row][column].setBackground(Color.decode("#2D3553"));
                tilesArray[row][column].setOpaque(true);
                tilesArray[row][column].setBounds(intialXGap, intialYGap, 80, 80);
                boardGamePanel.add(tilesArray[row][column]);
                intialXGap += horizontalGapTuning;
            }
            intialXGap = verticalGapTuning;
            intialYGap += verticaOffset;
        }
    }
    /**
     * Returns specific label located in given row and column.
     * Made for the Royal Game of Ur.
     * @param row Row in which tile is located.
     * @param column Column in which tile is located.
     * @return specific JLabel object.
     */
    @Override
    public JLabel getLabel(int row, int column){
        return tilesArray[row][column];
    }
    /**
     * Sets icon in label located in given row and column.
     * Made for the Royal Game of Ur.
     * @param row  Row in which tile is located.
     * @param column Column in which tile is located.
     * @param icon Icon that will be assigned.
     */
    @Override
    public void setNextPossibleLabel(int row, int column, Icon icon) {
        tilesArray[row][column].setIcon(icon);
    }
    /**
     * Removes icon from label located in given row and column.
     * Made for the Royal Game of Ur.
     * @param row  Row in which tile is located.
     * @param column Column in which tile is located.
     */
    private void removeIconFromLabel(int row, int column) {
        tilesArray[row][column].setIcon(null);
    }
    /**
     * Removes temporary icon from tile located in given row and column.
     * Made for the Royal Game of Ur.
     * @param row  Row in which tile is located.
     * @param column Column in which tile is located.
     */
    @Override
    public void removeIconFromTile(int row, int column){
        if (row == 0 && column == 0) {
            removeIconFromRose0_0();
        } else if (row == 0 && column == 2){
            removeIconFromRose0_2();
        } else if (row == 3 && column == 1){
            removeIconFromRose3_1();
        } else if (row == 6 && column == 0) {
            removeIconFromRose6_0();
        } else if (row == 6 && column == 2) {
            removeIconFromRose6_2();
        } else {
            removeIconFromLabel(row,column);
        }
    }
    /**
     * Removes temporary icon from rose tile.
     */
    private void removeIconFromRose0_0() {
        ImageIcon image = getImageIconRose();
        tilesArray[0][0].setIcon(image);
    }
    /**
     * Removes temporary icon from rose tile.
     */
    private void removeIconFromRose0_2() {
        ImageIcon image = getImageIconRose();
        tilesArray[0][2].setIcon(image);
    }
    /**
     * Removes temporary icon from rose tile.
     */
    private void removeIconFromRose3_1() {
        ImageIcon image = getImageIconRose();
        tilesArray[3][1].setIcon(image);
    }
    /**
     * Removes temporary icon from rose tile.
     */
    private void removeIconFromRose6_0() {
        ImageIcon image = getImageIconRose();
        tilesArray[6][0].setIcon(image);
    }
    /**
     * Removes temporary icon from rose tile.
     */
    private void removeIconFromRose6_2() {
        ImageIcon image = getImageIconRose();
        tilesArray[6][2].setIcon(image);
    }
    /**
     * Returns an image of a piece associated with given color.
     * Made for the Royal Game of Ur.
     * @param color The color that needs to be retrieved.
     * @return the icon representing colored piece.
     */
    @Override
    public ImageIcon getPieceImageColor(Color color) {
        ImageIcon colorIcon = null;
        BufferedImage image = null;
        if (color.getRGB() == BLUE.getRGB()) {
            //image = loadImagesForJarFile("blue_piece_rbg");
            image = loadImagesForIDEFile("blue_piece_rbg");
        } else if (color.getRGB() == BROWN.getRGB()) {
            //image = loadImagesForJarFile("brown_piece_rbg");
            image = loadImagesForIDEFile("brown_piece_rbg");
        } else if (color.getRGB() == GREEN.getRGB()) {
            //image = loadImagesForJarFile("green_piece_rbg");
            image = loadImagesForIDEFile("green_piece_rbg");
        } else if (color.getRGB() == PURPLE.getRGB()) {
            //image = loadImagesForJarFile("purple_piece_rbg");
            image = loadImagesForIDEFile("purple_piece_rbg");
        } else if (color.getRGB() == RED.getRGB()) {
            //image = loadImagesForJarFile("red_piece_rbg");
            image = loadImagesForIDEFile("red_piece_rbg");
        } else if (color.getRGB() == YELLOW.getRGB()) {
            //image = loadImagesForJarFile("yellow_piece_rbg");
            image = loadImagesForIDEFile("yellow_piece_rbg");
        }
        colorIcon = resizeImage(image, 78, 78);
      return colorIcon;
    }
    /**
     * Creates dice labels and initializes them.
     */
    private void makeDices(){
        diceLabelArray = new JLabel[4];
        /*For JAR file*/
        //BufferedImage diceState1Image = loadImagesForJarFile("result_0_1");
        //BufferedImage diceState2Image = loadImagesForJarFile("result_1_1");
        /*For NetBeans*/
        BufferedImage diceState1Image = loadImagesForIDEFile("result_0_1");
        BufferedImage diceState2Image = loadImagesForIDEFile("result_1_1");
        noScoreDiceState = resizeImage(diceState1Image, 77, 77);
        scoreDiceState = resizeImage(diceState2Image, 77, 77 );
        diceLabelArray[0] = dice1;
        diceLabelArray[1] = dice2;
        diceLabelArray[2] = dice3;
        diceLabelArray[3] = dice4;
        dice1.setIcon(noScoreDiceState);
        dice2.setIcon(noScoreDiceState);
        dice3.setIcon(noScoreDiceState);
        dice4.setIcon(noScoreDiceState);
    }
    /**
     * Resizes image to given width and height.
     * @param diceState Image to resize
     * @param width Image's new width.
     * @param height Image's new height.
     * @return new image in new size.
     */
    private ImageIcon resizeImage(BufferedImage image, int width, int height){
        ImageIcon diceStateIcon = new ImageIcon(image);
        Image temporalImage = diceStateIcon.getImage();
        Image resizedImage = temporalImage.getScaledInstance(width, height,  java.awt.Image.SCALE_SMOOTH);
        return new ImageIcon(resizedImage);
    }
    /**
     * Displays the result of thrown dice.
     * Made for the Royal Game of Ur.
     * @param rollResult The result of the throw.
     */
    @Override
    public void showThrownDice(int rollResult) {
        for(int index = 0; index < rollResult; index++){
            diceLabelArray[index].setIcon(scoreDiceState);
        }
    }
    /**
     * Resets dice labels to prepare for next throw.
     * Made for the Royal Game of Ur.
     */
    @Override
    public void cleanDice()
    {
        dice1.setIcon(noScoreDiceState);
        dice2.setIcon(noScoreDiceState);
        dice3.setIcon(noScoreDiceState);
        dice4.setIcon(noScoreDiceState);
    }
    /**
     * Sets label with amount of moves.
     * Made for the Royal Game of Ur.
     * @param rollResult Result of dice.
     */
    @Override
    public void setMoves(int rollResult)
    {
        String movesResult = String.valueOf(rollResult);
        moves.setText(movesResult);
    }
    /**
     * Returns an icon representing player's chosen color.
     * Made for the Royal Game of Ur.
     * @param color The color that needs to be retrieved.
     * @return the icon representing colored piece.
     */
    @Override
    public Icon getPlayerIcon(Color color){
        Icon icon = null;
        if (color == firstPlayerColor) {
            icon = getFirstPlayerIcon();
        } else if (color == secondPlayerColor) {
            icon = getSecondPlayerIcon();
        }
        return icon;
    }
    /**
     * Returns icon associated with first player.
     */
    private Icon getFirstPlayerIcon(){
        return pieceLabelFirstPlayer1.getIcon();
    }
    /**
     * Returns icon associated with second player.
     */
    private Icon getSecondPlayerIcon(){
        return pieceLabelSecondPlayer1.getIcon();
    }
    /**
     * Sets label of first player's name with given name.
     * @param name Player's name.
     */
    public void setFirstPlayerNameToLabel(String name){
        firstPlayerLabelName.setText(name);
    }
/**
     * Sets label of second player's name with given name.
     * @param name Player's name.
     */
    public void setSecondPlayerNameToLabel(String name){
        secondPlayerLabelName.setText(name);
    }
    /**
     * Sets first player's pieces with given color.
     * @param color Player's color.
     */
    public void setFirstPlayerPieceColor(Color color) {
        this.firstPlayerColor = color;
        ImageIcon colorIcon = getPieceImageColor(color);
        modifiyFirstPlayerPieces(colorIcon);
    }
    /**
     * Sets second player's pieces with given color.
     * @param color Player's color.
     */
    public void setSecondPlayerPieceColor(Color color) {
        this.secondPlayerColor = color;
        ImageIcon colorIcon = getPieceImageColor(color);
        modifySecondPlayerPieces(colorIcon);
    }
    /**
     * Sets first player's pieces with given icon.
     * @param icon New icon for piece.
     */
    private void modifiyFirstPlayerPieces(ImageIcon icon) {
        pieceLabelFirstPlayer1.setIcon(icon);
        pieceLabelFirstPlayer2.setIcon(icon);
        pieceLabelFirstPlayer3.setIcon(icon);
        pieceLabelFirstPlayer4.setIcon(icon);
        pieceLabelFirstPlayer5.setIcon(icon);
        pieceLabelFirstPlayer6.setIcon(icon);
        pieceLabelFirstPlayer7.setIcon(icon);
    }
    /**
     * Sets second player's pieces with given icon.
     * @param icon New icon for piece.
     */
    private void modifySecondPlayerPieces(ImageIcon icon)  {
        pieceLabelSecondPlayer1.setIcon(icon);
        pieceLabelSecondPlayer2.setIcon(icon);
        pieceLabelSecondPlayer3.setIcon(icon);
        pieceLabelSecondPlayer4.setIcon(icon);
        pieceLabelSecondPlayer5.setIcon(icon);
        pieceLabelSecondPlayer6.setIcon(icon);
        pieceLabelSecondPlayer7.setIcon(icon);
    }
    /**
     * Updates first player's score label by adding one point to it.
     */
    public void addScoreToFirstPlayer() {
        int currentScore = Integer.parseInt(firstPlayerScore.getText());
        currentScore+=1;
        firstPlayerScore.setText(Integer.toString(currentScore));
    }
    /**
     * Updates second player's score label by adding one point to it.
     */
    public void addScoreToSecondPlayer() {
        int currentScore = Integer.parseInt(secondPlayerScore.getText());
        currentScore+=1;
        secondPlayerScore.setText(Integer.toString(currentScore));
    }
    /**
     * Updates first player's score label to given amount
     * @param points Amount of points.
     */
    public void addScoreToFirstPlayer(int points) {
        int currentScore = Integer.parseInt(firstPlayerScore.getText());
        currentScore+=points;
        firstPlayerScore.setText(Integer.toString(currentScore));
    }
    /**
     * Updates second player's score label to given amount
     * @param points Amount of points.
     */
    public void addScoreToSecondPlayer(int points) {
        int currentScore = Integer.parseInt(secondPlayerScore.getText());
        currentScore+=points;
        secondPlayerScore.setText(Integer.toString(currentScore));
    }
    /**
     * Changes player turn to certain player.
     * Made for Royal Game of Ur.
     * @param number Id of new current player.
     */
    @Override
    public void changePlayerTurn(int number) {
        String playerTurn = "Player " + number+"'s" + " turn";
        playerTurnLabel.setText(playerTurn);
    }
    /**
     * Declares a player has won and updates labels.
     * Made for Royal Game of Ur.
     * @param number
     */
    @Override
    public void declarePlayerWinner(int number) {
        String playerTurn = "Player " + number + "'s" + " won!";
        playerTurnLabel.setText(playerTurn);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Player1Panel;
    private javax.swing.JPanel Player2Panel;
    private javax.swing.JLabel PlayerScoreTitle;
    private javax.swing.JLabel PlayerScoreTitle2;
    private javax.swing.JPanel boardGamePanel;
    private javax.swing.JLabel dice1;
    private javax.swing.JLabel dice2;
    private javax.swing.JLabel dice3;
    private javax.swing.JLabel dice4;
    private javax.swing.JPanel dicePanel;
    private java.awt.Label firstPlayerLabelName;
    private javax.swing.JLabel firstPlayerScore;
    private javax.swing.JLabel firstPlayerTitleLabel;
    private javax.swing.JLabel inventoryTitle1;
    private javax.swing.JLabel inventoryTitle2;
    private javax.swing.JLabel moves;
    private javax.swing.JLabel pieceLabelFirstPlayer1;
    private javax.swing.JLabel pieceLabelFirstPlayer2;
    private javax.swing.JLabel pieceLabelFirstPlayer3;
    private javax.swing.JLabel pieceLabelFirstPlayer4;
    private javax.swing.JLabel pieceLabelFirstPlayer5;
    private javax.swing.JLabel pieceLabelFirstPlayer6;
    private javax.swing.JLabel pieceLabelFirstPlayer7;
    private javax.swing.JLabel pieceLabelSecondPlayer1;
    private javax.swing.JLabel pieceLabelSecondPlayer2;
    private javax.swing.JLabel pieceLabelSecondPlayer3;
    private javax.swing.JLabel pieceLabelSecondPlayer4;
    private javax.swing.JLabel pieceLabelSecondPlayer5;
    private javax.swing.JLabel pieceLabelSecondPlayer6;
    private javax.swing.JLabel pieceLabelSecondPlayer7;
    private javax.swing.JLabel playerTurnLabel;
    private javax.swing.JButton rulesButton;
    private javax.swing.JButton saveAndLeaveButton;
    private java.awt.Label secondPlayerLabelName;
    private javax.swing.JLabel secondPlayerScore;
    private javax.swing.JLabel secondPlayerTitleLabel;
    private javax.swing.JButton throwDiceButton;
    // End of variables declaration//GEN-END:variables

}

